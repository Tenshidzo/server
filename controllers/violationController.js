import db from '../config/db.js';
import Violation from '../models/Violation.js';
export const createViolation = async (req, res) => {
  try {
    const { description, latitude, longitude, date, imageUrl } = req.body;
    const userId = req.userId;
    if (!description || !latitude || !longitude || !imageUrl) {
      return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è (description, latitude, longitude, imageUrl) —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º–∏' });
    }
    if (description.length < 5) {
      return res.status(400).json({ error: '–û–ø–∏—Å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 5 —Å–∏–º–≤–æ–ª—ñ–≤' });
    }
    const lat = parseFloat(latitude);
    const lng = parseFloat(longitude);
    if (isNaN(lat) || lat < -90 || lat > 90 || isNaN(lng) || lng < -180 || lng > 180) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (latitude/longitude)' });
    }
    if (typeof imageUrl !== 'string' || !imageUrl.startsWith('http')) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è' });
    }
    let dbDate;
    try {
      dbDate = date ? new Date(date).toISOString() : new Date().toISOString();
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞');
      dbDate = new Date().toISOString();
    }

    await db.run(
      `INSERT INTO violations 
       (description, imageUrl, userId, latitude, longitude, date)
       VALUES (?, ?, ?, ?, ?, ?)`,
      [description, imageUrl, userId, latitude, longitude, dbDate]
    );

    console.log('–ù–∞—Ä—É—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –¥–∞—Ç–æ–π:', dbDate);
    return res.status(201).json({ success: true });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', err);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};



export const getViolations = async (req, res) => {
  try {
    console.log('getViolations called, query:', req.query);
    const { month, year, date } = req.query;
    
    if (date) {
      const violations = await Violation.findAll(db, {
        userId: req.userId || null,
        date
      });
      console.log(`getViolations by date ${date}, count:`, violations.length);
      return res.json(violations);
    }

    if (!month || !year) {
      console.log('getViolations missing month/year');
      return res
        .status(400)
        .json({ error: "–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ month —ñ year –∞–±–æ date" });
    }

    const violations = await Violation.findByDate(db, {
      month: parseInt(month),
      year: parseInt(year)
    });
    console.log(`getViolations by month ${month}/${year}, count:`, violations.length);

    res.json(violations);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ getViolations:', error.message);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
export const getMyViolations = async (req, res) => {
  try {
    const userId = req.userId;
    const { date, lat, lng, radius } = req.query;

    let sql = `
      SELECT 
        id, 
        description, 
        imageUrl as image, 
        date, 
        userId, 
        latitude, 
        longitude 
      FROM violations 
      WHERE userId = ?
    `;
    const params = [userId];

    if (date) {
      const start = new Date(date);
      start.setHours(0, 0, 0, 0);
      const end = new Date(date);
      end.setHours(23, 59, 59, 999);
      sql += ` AND date BETWEEN ? AND ?`;
      params.push(start.toISOString(), end.toISOString());
    }
    if (lat && lng && radius) {
      const r = parseFloat(radius);
      const latFloat = parseFloat(lat);
      const lngFloat = parseFloat(lng);

      const latDelta = r / 111;
      const lngDelta = r / (111 * Math.cos(latFloat * (Math.PI / 180)));

      const minLat = latFloat - latDelta;
      const maxLat = latFloat + latDelta;
      const minLng = lngFloat - lngDelta;
      const maxLng = lngFloat + lngDelta;

      sql += ` AND latitude BETWEEN ? AND ? AND longitude BETWEEN ? AND ?`;
      params.push(minLat, maxLat, minLng, maxLng);
    }

    sql += ` ORDER BY date DESC`;

    const all = await db.all(sql, params);

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${all.length}`);
    return res.json(all);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getMyViolations:', err.message);
    return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è' });
  }
};

export const deleteViolation = async (req, res) => {
  try {
    console.log('deleteViolation called, params:', req.params);
    const id = parseInt(req.params.id, 10);
    const userId = req.userId;
    console.log(`deleteViolation userId: ${userId}, id: ${id}`);

    const result = await Violation.deleteById(db, { id, userId });
    console.log('deleteViolation result:', result);
    return res.json({ success: true });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ deleteViolation:', err.message);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å' });
  }
};
export const getPublicViolations = async (req, res) => {
  try {
    const all = await db.all(`
      SELECT 
        id, 
        description, 
        imageUrl as image, 
        date, 
        userId, 
        latitude, 
        longitude 
      FROM violations
      ORDER BY date DESC
    `);

    console.log('üìç –ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', all.length);
    return res.json(all);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π:', err.message);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è' });
  }
};